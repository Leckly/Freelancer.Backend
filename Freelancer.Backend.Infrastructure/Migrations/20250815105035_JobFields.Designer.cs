// <auto-generated />
using System;
using Freelancer.Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freelancer.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20250815105035_JobFields")]
    partial class JobFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobPhoto", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobRequest", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobs");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobsUser", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobsUsers");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Rate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Krs")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("KRS");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIP");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.UserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhoto", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Job__UserId__02084FDA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobPhoto", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany("JobPhotos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__JobPhoto__JobId__07C12930");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobRequest", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany("JobRequests")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__UserJobs__JobId__03F0984C");

                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("JobsUser")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserJobs__UserId__02FC7413");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobsUser", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__JobsUsers__JobId__05D8E0BE");

                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__JobsUsers__UserI__04E4BC85");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Rating", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Rating__UserId__06CD04F7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleId__7E37BEF6");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.UserPhoto", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("Freelancer.Backend.Domain.UserPhoto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__User__PhotoId__7F2BE32F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.Navigation("JobPhotos");

                    b.Navigation("JobRequests");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("JobsUser");

                    b.Navigation("Photo");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
