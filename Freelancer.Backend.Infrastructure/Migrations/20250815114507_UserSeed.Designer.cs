// <auto-generated />
using System;
using Freelancer.Backend.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Freelancer.Backend.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    [Migration("20250815114507_UserSeed")]
    partial class UserSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobPhoto", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobRequest", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobs");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobsUser", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobsUsers");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("Rate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Employee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Krs")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("KRS");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("NIP");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Warsaw, Aleje Jerozolimskie 5",
                            CompanyName = "GoodCompany",
                            Country = "Poland",
                            Description = "Doświadczony programista .NET i Java z pasją do nowych technologii.",
                            Email = "john.smith@gmail.com",
                            FirstName = "John",
                            Krs = "0123456789",
                            LastName = "Smith",
                            Nip = "0123456789",
                            PasswordHash = "AQAAAAIAAYagAAAAEBO1gCDFtkEd/kyYVxmKSpdJGgMFIxvGVu2iScNI0FydVI2xoGMqgrwavexro/QImg==",
                            RoleId = 1,
                            Tags = "[\".NET\",\"Java\"]"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Krakow, Main Street 12",
                            CompanyName = "DevMasters",
                            Country = "Poland",
                            Description = "Senior developer z wieloletnim doświadczeniem w pracy z chmurą Azure.",
                            Email = "michael.brown@gmail.com",
                            FirstName = "Michael",
                            Krs = "9876543210",
                            LastName = "Brown",
                            Nip = "1234567890",
                            PasswordHash = "AQAAAAIAAYagAAAAEHndJkY5o6FWutYrCnEpzU41ERGosj2EHlunXrI2vDSc3WN9wEfC+f5odBBw9Y43DA==",
                            RoleId = 1,
                            Tags = "[\"C#\",\"Azure\"]"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Gdansk, Dluga 1",
                            CompanyName = "WebSolutions",
                            Country = "Poland",
                            Description = "Fullstack developer z doświadczeniem w React i Node.js.",
                            Email = "anna.kowalska@gmail.com",
                            FirstName = "Anna",
                            Krs = "6655443322",
                            LastName = "Kowalska",
                            Nip = "2233445566",
                            PasswordHash = "AQAAAAIAAYagAAAAEOS8T/34Pw8/8Ht1DJi1FFrkwjgo8WPcYCqudgvb6Nc83OCmbNNiKzyPGJhq0oqu3Q==",
                            RoleId = 1,
                            Tags = "[\"React\",\"Node.js\"]"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Lodz, Piotrkowska 100",
                            CompanyName = "CloudTech",
                            Country = "Poland",
                            Description = "Specjalista backend z dużą wiedzą w zakresie Java i Spring Boot.",
                            Email = "piotr.nowak@gmail.com",
                            FirstName = "Piotr",
                            Krs = "5566778899",
                            LastName = "Nowak",
                            Nip = "9988776655",
                            PasswordHash = "AQAAAAIAAYagAAAAEIjWpeNyKtW7+ODf0Sb+Anc6YOGbmnywtb1Z8nwL957FiPxzVKWDn2v2gCRjHfharg==",
                            RoleId = 1,
                            Tags = "[\"Java\",\"Spring Boot\"]"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Poznan, Swiety Marcin 45",
                            CompanyName = "UIWorks",
                            Country = "Poland",
                            Description = "Ekspert frontend z doświadczeniem w Angular i TypeScript.",
                            Email = "karolina.mazur@gmail.com",
                            FirstName = "Karolina",
                            Krs = "4333222111",
                            LastName = "Mazur",
                            Nip = "1112223334",
                            PasswordHash = "AQAAAAIAAYagAAAAEBHyPCwtHaVP5QNn7XM0iGkx8KwK5b+ruArjVxwE8R79FZ8gZVtfm4T97mAmHdhCBA==",
                            RoleId = 1,
                            Tags = "[\"Angular\",\"TypeScript\"]"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Szczecin, Aleja Piastów 10",
                            CompanyName = "SoftBuild",
                            Country = "Poland",
                            Description = "Architekt oprogramowania specjalizujący się w .NET i mikroserwisach.",
                            Email = "pawel.zielinski@gmail.com",
                            FirstName = "Pawel",
                            Krs = "0999888777",
                            LastName = "Zielinski",
                            Nip = "7778889990",
                            PasswordHash = "AQAAAAIAAYagAAAAEHv/yUP5QuOK04NAh9ZG55JPWuauFB2Nx7Cc+uvUSIKNRTBBOqHBHVYjhOGFoZAP5w==",
                            RoleId = 1,
                            Tags = "[\".NET\",\"Microservices\"]"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Warsaw, Nowy Swiat 20",
                            CompanyName = "TestIt",
                            Country = "Poland",
                            Description = "Inżynier QA z doświadczeniem w automatyzacji testów.",
                            Email = "magdalena.wisniewska@gmail.com",
                            FirstName = "Magdalena",
                            Krs = "5544332211",
                            LastName = "Wisniewska",
                            Nip = "1122334455",
                            PasswordHash = "AQAAAAIAAYagAAAAEKoKut819ZYcjbvjt4zsWve7C5kt2LEYEXgvSP5bQwYeU14E3QDKCqLlV+9sUlYXDA==",
                            RoleId = 1,
                            Tags = "[\"Selenium\",\"Cypress\"]"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Katowice, Mickiewicza 8",
                            CompanyName = "OpsMasters",
                            Country = "Poland",
                            Description = "Inżynier DevOps specjalizujący się w Docker i Kubernetes.",
                            Email = "adam.lewandowski@gmail.com",
                            FirstName = "Adam",
                            Krs = "9988776655",
                            LastName = "Lewandowski",
                            Nip = "5566778899",
                            PasswordHash = "AQAAAAIAAYagAAAAEAvxYcTps5fbWj7J3QBzr5bDkCDVZPK0AAx24Ar/NItF3MV3QfpVmOelbbKv+gH/1A==",
                            RoleId = 1,
                            Tags = "[\"Docker\",\"Kubernetes\"]"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Bydgoszcz, Główna 22",
                            CompanyName = "DataVision",
                            Country = "Poland",
                            Description = "Data scientist z doświadczeniem w Python i machine learning.",
                            Email = "dorota.kaczmarek@gmail.com",
                            FirstName = "Dorota",
                            Krs = "5544211332",
                            LastName = "Kaczmarek",
                            Nip = "3322114455",
                            PasswordHash = "AQAAAAIAAYagAAAAEErO4dsOutgSRVR7p1SeJCK4Joa4RHNpqvQpI061qWM8XVD88wQfXhlrutzWpksGQA==",
                            RoleId = 1,
                            Tags = "[\"Python\",\"ML\"]"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Opole, Krakowska 15",
                            CompanyName = "Appify",
                            Country = "Poland",
                            Description = "Programista aplikacji mobilnych w Flutter i React Native.",
                            Email = "marcin.wozniak@gmail.com",
                            FirstName = "Marcin",
                            Krs = "2211009988",
                            LastName = "Wozniak",
                            Nip = "8899001122",
                            PasswordHash = "AQAAAAIAAYagAAAAEKD0NJcN4ZQZdvSFWwT1MIkkTueePOM7J0/Jz0G1g9ld+J+HuP0ZgESO7xxJ80uB+w==",
                            RoleId = 1,
                            Tags = "[\"Flutter\",\"React Native\"]"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Bialystok, Aleje Jerozolimskie 5",
                            CompanyName = "PerfectCompany",
                            Country = "Poland",
                            Description = "Firma IT specjalizująca się w rozwiązaniach webowych i mobilnych dla sektora e-commerce.",
                            Email = "jack.smith@gmail.com",
                            FirstName = "Jack",
                            Krs = "0123456789",
                            LastName = "Smith",
                            Nip = "0123456789",
                            PasswordHash = "AQAAAAIAAYagAAAAECZ1gBQigIeYM4Dbeu77P5HHaVyI8JoAnyrIwvGwpZqBJWXY5kuYxFHDjSCYRCn9rA==",
                            RoleId = 2,
                            Tags = "[\".NET\",\"Java\"]"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Warsaw, Prosta 4",
                            CompanyName = "HRPlus",
                            Country = "Poland",
                            Description = "Agencja HR oferująca kompleksowe usługi rekrutacyjne i doradztwo personalne.",
                            Email = "lisa.jones@gmail.com",
                            FirstName = "Lisa",
                            Krs = "3213213210",
                            LastName = "Jones",
                            Nip = "1231231230",
                            PasswordHash = "AQAAAAIAAYagAAAAEGHjgvHPguifKMsQysaUdfrjFo3XkMvHu6ixm0dLw+u8OSuVwpnrRO6laOvBhxdbsw==",
                            RoleId = 2,
                            Tags = "[\"Recruitment\",\"Onboarding\"]"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Lublin, Krakowskie Przedmieście 33",
                            CompanyName = "MarketLead",
                            Country = "Poland",
                            Description = "Agencja marketingowa zajmująca się kampaniami SEO i reklamami Google Ads.",
                            Email = "tomasz.malinowski@gmail.com",
                            FirstName = "Tomasz",
                            Krs = "7666555444",
                            LastName = "Malinowski",
                            Nip = "4445556667",
                            PasswordHash = "AQAAAAIAAYagAAAAECnRAwPjmqsb2Gh81ZV69v2UtcQMdl+qAxar+YhhsCHHJPBipW5TbnZvZRkkHGCmhQ==",
                            RoleId = 2,
                            Tags = "[\"SEO\",\"Google Ads\"]"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Warsaw, Marszalkowska 7",
                            CompanyName = "DesignHub",
                            Country = "Poland",
                            Description = "Studio projektowe tworzące nowoczesne interfejsy i doświadczenia użytkowników.",
                            Email = "ewa.adamska@gmail.com",
                            FirstName = "Ewa",
                            Krs = "4131211101",
                            LastName = "Adamska",
                            Nip = "1011121314",
                            PasswordHash = "AQAAAAIAAYagAAAAEOVFDDkZxabR/O0GFUU9K5Jzrk0vfcyXZd23gD59YEJ5wx2g8WT2p9fp0779UN8jJg==",
                            RoleId = 2,
                            Tags = "[\"Figma\",\"UX\"]"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Kielce, Sienkiewicza 11",
                            CompanyName = "BizGrow",
                            Country = "Poland",
                            Description = "Firma doradcza specjalizująca się w obsłudze klientów B2B i negocjacjach handlowych.",
                            Email = "grzegorz.kubiak@gmail.com",
                            FirstName = "Grzegorz",
                            Krs = "0099887766",
                            LastName = "Kubiak",
                            Nip = "6677889900",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1ITWhkwmVaC/UP3oghyOGAba7S5c5+apkU+Gym5aoH/19IKw6T/hN2E7WOtrTZ7A==",
                            RoleId = 2,
                            Tags = "[\"B2B\",\"Negotiations\"]"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Rzeszow, Grunwaldzka 6",
                            CompanyName = "PMExperts",
                            Country = "Poland",
                            Description = "Firma zajmująca się koordynacją projektów IT w metodykach Agile i Scrum.",
                            Email = "joanna.olszewska@gmail.com",
                            FirstName = "Joanna",
                            Krs = "1100998877",
                            LastName = "Olszewska",
                            Nip = "7788990011",
                            PasswordHash = "AQAAAAIAAYagAAAAEJSKnz3vbwYv0Ziv11CiBkVbpLe/mHqtlm9WZFCAvGPZdqtsebeuwAwrMn+gxmeF5A==",
                            RoleId = 2,
                            Tags = "[\"Agile\",\"Scrum\"]"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Gdynia, Skwer Kosciuszki 9",
                            CompanyName = "ITSecure",
                            Country = "Poland",
                            Description = "Dostawca usług IT w zakresie administracji serwerami i bezpieczeństwa sieci.",
                            Email = "krzysztof.urban@gmail.com",
                            FirstName = "Krzysztof",
                            Krs = "2233446655",
                            LastName = "Urban",
                            Nip = "5566443322",
                            PasswordHash = "AQAAAAIAAYagAAAAENs+iv6tGmL7envuCKoauNrQZ104RwI0qzp5NsYlTrue2hEWrg9SKYP78XOLxJ1l3Q==",
                            RoleId = 2,
                            Tags = "[\"Linux\",\"Networking\"]"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Bielsko-Biala, Partyzantów 18",
                            CompanyName = "BizAnalytics",
                            Country = "Poland",
                            Description = "Firma analityczna świadcząca usługi w zakresie analizy biznesowej i baz danych.",
                            Email = "monika.dabrowska@gmail.com",
                            FirstName = "Monika",
                            Krs = "7766554433",
                            LastName = "Dabrowska",
                            Nip = "3344556677",
                            PasswordHash = "AQAAAAIAAYagAAAAEMuhpfhDyDCr8HcykULwPPXTkCiyHqKv0nuN7asXmDAoUye22WcfSmcWE9+qa89+uw==",
                            RoleId = 2,
                            Tags = "[\"SQL\",\"UML\"]"
                        },
                        new
                        {
                            Id = 19,
                            Address = "Torun, Szeroka 2",
                            CompanyName = "HelpDeskPro",
                            Country = "Poland",
                            Description = "Firma świadcząca wsparcie techniczne oraz konsultacje w obszarze IT.",
                            Email = "dawid.pietrzak@gmail.com",
                            FirstName = "Dawid",
                            Krs = "6655443322",
                            LastName = "Pietrzak",
                            Nip = "2233445566",
                            PasswordHash = "AQAAAAIAAYagAAAAEIBc+UJNFK74bl1sSoWc1rMmStKS6o4dmaijOG7mexdhQVB16pm9wPlMzdis8w1LeA==",
                            RoleId = 2,
                            Tags = "[\"Customer Service\",\"ITIL\"]"
                        },
                        new
                        {
                            Id = 20,
                            Address = "Plock, Tumskie 14",
                            CompanyName = "ContentLab",
                            Country = "Poland",
                            Description = "Agencja kreatywna specjalizująca się w tworzeniu treści marketingowych.",
                            Email = "natalia.sawicka@gmail.com",
                            FirstName = "Natalia",
                            Krs = "5566778899",
                            LastName = "Sawicka",
                            Nip = "9988776655",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTeVyaGYTwMF9AecllFQlANfU/RXTrAGOdcBKJpbykZIxdTdCGdCy/EM+9ak+NElA==",
                            RoleId = 2,
                            Tags = "[\"Copywriting\",\"Social Media\"]"
                        });
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.UserPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserPhoto", (string)null);
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Job__UserId__02084FDA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobPhoto", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany("JobPhotos")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__JobPhoto__JobId__07C12930");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobRequest", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany("JobRequests")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__UserJobs__JobId__03F0984C");

                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("JobsUser")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserJobs__UserId__02FC7413");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.JobsUser", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__JobsUsers__JobId__05D8E0BE");

                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__JobsUsers__UserI__04E4BC85");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Rating", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Rating__UserId__06CD04F7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__User__RoleId__7E37BEF6");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.UserPhoto", b =>
                {
                    b.HasOne("Freelancer.Backend.Domain.User", "User")
                        .WithOne("Photo")
                        .HasForeignKey("Freelancer.Backend.Domain.UserPhoto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__User__PhotoId__7F2BE32F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Job", b =>
                {
                    b.Navigation("JobPhotos");

                    b.Navigation("JobRequests");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Freelancer.Backend.Domain.User", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("JobsUser");

                    b.Navigation("Photo");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
